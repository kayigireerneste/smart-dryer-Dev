// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  devices       Device[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Device {
  id           Int            @id @default(autoincrement())
  deviceId     String         @unique
  name         String
  model        String?
  status       String         @default("offline") // online, offline, maintenance
  userId       Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  readings     SensorReading[]
  dryingCycles DryingCycle[]
}

model SensorReading {
  id          Int      @id @default(autoincrement())
  deviceId    Int
  temperature Float
  humidity    Float
  moisture    Float
  weight      Float
  timestamp   DateTime @default(now())
  device      Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
}

model DryingCycle {
  id           Int       @id @default(autoincrement())
  deviceId     Int
  startTime    DateTime
  endTime      DateTime?
  duration     Int?      // in minutes
  mode         String    // Normal, Quick, Delicate, Heavy Duty, etc.
  temperature  Float
  fanSpeed     Float
  energyUsed   Float?
  status       String    @default("in_progress") // in_progress, completed, cancelled, error
  aiEnabled    Boolean   @default(true)
  ecoMode      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  device       Device    @relation(fields: [deviceId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  type      String   // info, success, warning, error
  read      Boolean  @default(false)
  userId    Int
  timestamp DateTime @default(now())
}
